import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id 'org.jetbrains.kotlin.jvm'
    id 'java-library'
    id 'org.jlleitschuh.gradle.ktlint'
    id 'maven-publish'
    id 'signing'
}

group 'dev.skye.daisy'
def projectTitle = 'daisy-ktor'
project.setProperty('archivesBaseName', projectTitle)

def environmentVersion = System.getenv('VERSION')
if (environmentVersion == null || environmentVersion.isBlank()) {
    version = '0.0.1-SNAPSHOT'
} else {
    version = environmentVersion.replaceFirst("v", "")
}

repositories {
    mavenCentral()
}

dependencies {
    implementation project(":core")

    // Kotlin
    implementation platform('org.jetbrains.kotlin:kotlin-bom')
    implementation platform('org.jetbrains.kotlinx:kotlinx-coroutines-bom:1.5.0')
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-jdk8'

    // Ktor
    implementation platform('io.ktor:ktor-bom:1.6.0')
    implementation 'io.ktor:ktor-server-core'

    // Tests
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit'
    testImplementation 'io.ktor:ktor-server-test-host'
    testImplementation 'io.micrometer:micrometer-core:1.6.5'
    testImplementation platform('software.amazon.awssdk:bom:2.16.8')
    testImplementation 'software.amazon.awssdk:sqs'
    testImplementation 'software.amazon.awssdk:sns'
}

compileJava {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

compileKotlin {
    kotlinOptions.useIR = true
    kotlinOptions.jvmTarget = JavaVersion.VERSION_11
}

test {
    testLogging {
        events = [
                TestLogEvent.SKIPPED,
                TestLogEvent.PASSED,
                TestLogEvent.FAILED,
                TestLogEvent.STANDARD_ERROR
        ]
        outputs.upToDateWhen { false }
        showStandardStreams = true
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

def publishingUser = System.getenv('PUBLISHING_USER')
def publishingPassword = System.getenv('PUBLISHING_PASSWORD')
def publishingUrl = System.getenv("PUBLISHING_URL")

publishing {
    repositories {
        maven {
            url = publishingUrl
            credentials {
                username = publishingUser
                password = publishingPassword
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'daisy-ktor'
            from components.java
            pom {
                name = 'Daisy Ktor'
                description = 'A coroutine based message processing library for backend services'
                url = 'https://github.com/CarrotCodes/daisy'
                licenses {
                    license {
                        name = 'Apache License, Version 2.0'
                        url = 'https://github.com/CarrotCodes/Daisy/blob/main/LICENSE.txt'
                    }
                }
                developers {
                    developer {
                        id = 'carrotcodes'
                        name = 'Skye Welch'
                    }
                }
                scm {
                    url = "https://github.com/CarrotCodes/daisy.git"
                }
            }
        }
    }
}

def signingKey = System.getenv("SIGNING_KEY_ID")
def signingKeyPassphrase = System.getenv("SIGNING_KEY_PASSPHRASE")

if (signingKey != null && signingKey != "") {
    project.ext["signing.gnupg.keyName"] = signingKey
    project.ext["signing.gnupg.passphrase"] = signingKeyPassphrase

    signing {
        useGpgCmd()
        sign publishing.publications
    }
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}